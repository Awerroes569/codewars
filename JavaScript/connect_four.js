function modifyBoard(board, move) {

    const columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
    const [column, color] = move.split("_");
    const index = columns.indexOf(column);

    for (let i = 5; i > -1; i--) {
        if (board[i][index] === null) {
            board[i][index] = color[0];
            break;
        }
    }
}

function whoIsWinner(piecesPositionList) {
    const board = Array.from({ length: 6 }, () => Array(7).fill(null));
    const columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
    let counter = 0;
    const winningCombinations = [
        // --- Horizontal (24) ---
        [[0, 0], [0, 1], [0, 2], [0, 3]],
        [[0, 1], [0, 2], [0, 3], [0, 4]],
        [[0, 2], [0, 3], [0, 4], [0, 5]],
        [[0, 3], [0, 4], [0, 5], [0, 6]],

        [[1, 0], [1, 1], [1, 2], [1, 3]],
        [[1, 1], [1, 2], [1, 3], [1, 4]],
        [[1, 2], [1, 3], [1, 4], [1, 5]],
        [[1, 3], [1, 4], [1, 5], [1, 6]],

        [[2, 0], [2, 1], [2, 2], [2, 3]],
        [[2, 1], [2, 2], [2, 3], [2, 4]],
        [[2, 2], [2, 3], [2, 4], [2, 5]],
        [[2, 3], [2, 4], [2, 5], [2, 6]],

        [[3, 0], [3, 1], [3, 2], [3, 3]],
        [[3, 1], [3, 2], [3, 3], [3, 4]],
        [[3, 2], [3, 3], [3, 4], [3, 5]],
        [[3, 3], [3, 4], [3, 5], [3, 6]],

        [[4, 0], [4, 1], [4, 2], [4, 3]],
        [[4, 1], [4, 2], [4, 3], [4, 4]],
        [[4, 2], [4, 3], [4, 4], [4, 5]],
        [[4, 3], [4, 4], [4, 5], [4, 6]],

        [[5, 0], [5, 1], [5, 2], [5, 3]],
        [[5, 1], [5, 2], [5, 3], [5, 4]],
        [[5, 2], [5, 3], [5, 4], [5, 5]],
        [[5, 3], [5, 4], [5, 5], [5, 6]],

        // --- Vertical (21) ---
        [[0, 0], [1, 0], [2, 0], [3, 0]],
        [[1, 0], [2, 0], [3, 0], [4, 0]],
        [[2, 0], [3, 0], [4, 0], [5, 0]],

        [[0, 1], [1, 1], [2, 1], [3, 1]],
        [[1, 1], [2, 1], [3, 1], [4, 1]],
        [[2, 1], [3, 1], [4, 1], [5, 1]],

        [[0, 2], [1, 2], [2, 2], [3, 2]],
        [[1, 2], [2, 2], [3, 2], [4, 2]],
        [[2, 2], [3, 2], [4, 2], [5, 2]],

        [[0, 3], [1, 3], [2, 3], [3, 3]],
        [[1, 3], [2, 3], [3, 3], [4, 3]],
        [[2, 3], [3, 3], [4, 3], [5, 3]],

        [[0, 4], [1, 4], [2, 4], [3, 4]],
        [[1, 4], [2, 4], [3, 4], [4, 4]],
        [[2, 4], [3, 4], [4, 4], [5, 4]],

        [[0, 5], [1, 5], [2, 5], [3, 5]],
        [[1, 5], [2, 5], [3, 5], [4, 5]],
        [[2, 5], [3, 5], [4, 5], [5, 5]],

        [[0, 6], [1, 6], [2, 6], [3, 6]],
        [[1, 6], [2, 6], [3, 6], [4, 6]],
        [[2, 6], [3, 6], [4, 6], [5, 6]],

        // --- Diagonal ↓→ (12) ---
        [[0, 0], [1, 1], [2, 2], [3, 3]],
        [[0, 1], [1, 2], [2, 3], [3, 4]],
        [[0, 2], [1, 3], [2, 4], [3, 5]],
        [[0, 3], [1, 4], [2, 5], [3, 6]],

        [[1, 0], [2, 1], [3, 2], [4, 3]],
        [[1, 1], [2, 2], [3, 3], [4, 4]],
        [[1, 2], [2, 3], [3, 4], [4, 5]],
        [[1, 3], [2, 4], [3, 5], [4, 6]],

        [[2, 0], [3, 1], [4, 2], [5, 3]],
        [[2, 1], [3, 2], [4, 3], [5, 4]],
        [[2, 2], [3, 3], [4, 4], [5, 5]],
        [[2, 3], [3, 4], [4, 5], [5, 6]],

        // --- Diagonal ↑→ (12) ---
        [[3, 0], [2, 1], [1, 2], [0, 3]],
        [[4, 0], [3, 1], [2, 2], [1, 3]],
        [[5, 0], [4, 1], [3, 2], [2, 3]],

        [[3, 1], [2, 2], [1, 3], [0, 4]],
        [[4, 1], [3, 2], [2, 3], [1, 4]],
        [[5, 1], [4, 2], [3, 3], [2, 4]],

        [[3, 2], [2, 3], [1, 4], [0, 5]],
        [[4, 2], [3, 3], [2, 4], [1, 5]],
        [[5, 2], [4, 3], [3, 4], [2, 5]],

        [[3, 3], [2, 4], [1, 5], [0, 6]],
        [[4, 3], [3, 4], [2, 5], [1, 6]],
        [[5, 3], [4, 4], [3, 5], [2, 6]],
    ];

    for (let move of piecesPositionList) {
        counter++;
        modifyBoard(board, move);
        if (counter > 6) {
            for (let combination of winningCombinations) {

                let values = new Set();

                for (let coord of combination) {
                    let [row, col] = coord;
                    values.add(board[row.toString()][col.toString()]);
                }

                if (values.size === 1) {
                    if (values.has(null)) continue;
                    if (values.has('Y')) return 'Yellow';
                    if (values.has('R')) return 'Red';
                }


            }
        }
    }

    return "Draw";
}

